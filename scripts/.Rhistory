1*2
print(birthday)
print(birthday)
birthday <- 0103
print(birthday)
print(birthday)
9/2
9.0/2
6/5
1/3
birthday <- 0103
print(birthday)
hours_in_a_week <- 24 * 7
hours_in_a_week <- 24 * 7
print(hours_in_a_week)
# write a script
hours_in_a_week <- 24 * 7
hours_in_a_week <- 24 * 7
print(hours_in_a_week)
hours_in_a_week <- 24 * 7
# write a script
hours_in_a_week <- 24 * 7
print(hours_in_a_week)
boolean1 <- hours_in_a_week != 168
print
print(boolean1)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
summary(cars)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(cars$speed, 1)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(cars$speed, 1)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(cars$speed, 1)
source('~/Desktop/analysis.R', echo=TRUE)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(cars$speed, 2)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(cars$speed, 1)
library(dplyr)
cars_styled <- italic(cars$speed)
library(ggplot2)
View(mid)
View(midwest)
shiny::runApp('Info201/a8-shiny-allenszx')
runApp('Info201/web-materials/exercise-1')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
View(build_scatter)
df_pov <- aggregate(midwest[, 24:26], list(midwest$state), sum, row.names = F)
names(df_pov) <- c( "State", "Child", "Adult",
"Elderly")
View(df_pov)
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
install.packages("shinythemes")
shiny::runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
runApp('Info201/a8-shiny-allenszx')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
# Creates Daily Price Chart: by company and scrub for date
# Set Up
install.packages("Quandl")
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/analytics.R')
install.packages("alphavantager")
source('~/Info201/info201_final_project/scripts/analytics.R')
# Other analysis tab
library(dplyr)
library(ggplot2)
library(alphavantager)
# Using alphavantage here for more current info, quandl isn't always to date
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$adjusted_close - lag(market$adjusted_close))/
lag(market$adjusted_close) * 100
market$return[1] <- 0
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
# Function to create the sector growth plot
sector_growth <- function(){
sector <- av_get(av_fun = "SECTOR")
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
# Other analysis tab
library(dplyr)
library(ggplot2)
library(alphavantager)
# Using alphavantage here for more current info, quandl isn't always to date
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$adjusted_close - lag(market$adjusted_close))/
lag(market$adjusted_close) * 100
market$return[1] <- 0
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
# Function to create the sector growth plot
sector_growth <- function(){
sector <- av_get(av_fun = "SECTOR")
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
s
source('~/Info201/info201_final_project/scripts/returns.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
setwd("~/Info201/info201_final_project/scripts")
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
getwd()
source("../api_keys.R")
source('~/Info201/info201_final_project/scripts/returns.R')
getwd()
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
source('~/Info201/info201_final_project/scripts/get_price_chart.R')
View(test_price)
test_price["data"]
View(test_price["data"])
as.data.frame(test_price["data"])
View(as.data.frame(test_price["data"]))
test_price
test_get_analytics <- get_analytics(ticker_in)
# Other analysis tab
library(dplyr)
library(ggplot2)
library(alphavantager)
# Using alphavantage here for more current info, quandl isn't always to date
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$adjusted_close - lag(market$adjusted_close))/
lag(market$adjusted_close) * 100
market$return[1] <- 0
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
# Function to create the sector growth plot
sector_growth <- function(){
sector <- av_get(av_fun = "SECTOR")
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
test_get_analytics <- get_analytics(ticker_in)
test_get_analytics <- get_analytics(ticker_in)
# Other analysis tab
library(dplyr)
library(ggplot2)
library(alphavantager)
source("../api_keys.R")
# Using alphavantage here for more current info, quandl isn't always to date
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$adjusted_close - lag(market$adjusted_close))/
lag(market$adjusted_close) * 100
market$return[1] <- 0
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
# Function to create the sector growth plot
sector_growth <- function(){
sector <- av_get(av_fun = "SECTOR")
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
test_get_analytics <- get_analytics(ticker_in)
test_get_analytics <- get_analytics(ticker_in)
source('~/Info201/info201_final_project/scripts/analytics.R')
View(test_get_analytics)
View(test_get_analytics)
View(as.data.frame(test_get_analytics))
return_chart("MMM", "market", "return")
test_return_chart <- return_chart("MMM", "market", "return")
# Do stuff with Returns
library(dplyr)
library(ggplot2)
library(alphavantager)
# Using alphavantage here for more current info, quandl isn't always to date
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
market$return[1] <- 0
# Returns chart allowing user to map price, return, volume, expected return, and
#market return on either axis
return_chart <- function(ticker_in, x_axis, y_axis){
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[0] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
q <- ggplot(stock, aes_string(x_axis, y_axis)) +
geom_point()
q
}
test_return_chart <- return_chart("MMM", "market", "return")
test_return_chart
runApp()
runApp()
test_return_chart
runApp()
runApp()
runApp()
test_price
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
