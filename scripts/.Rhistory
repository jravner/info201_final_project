demo()
colors()
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Joey"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function (name, age) {
intro <- paste("Hello my name is ", name, ", and I'm ", age, " years old.",sep="")
intro
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- my_intro
casual_intro <- sub("Hello my name is", "Hey, I'm", casual_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
e_count <- str_count(my_intro, pattern = "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(60 * 24)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value * value * value
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "The Shawshank Redemption", "Ferris Buelers Day Off", "Saving Private Ryan", "Breakfast Club","Dead Poets Society")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, c(T, T, T, F, T, T))
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- paste(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(makes)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library(dplyr)
# Install and load the "dplyr" library
install.packages("dplyr")
setwd("D:/Classes/INFO 201/info201_final_project/scripts")
shiny::runApp()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
# Do stuff with Returns
library(dplyr)
library(ggplot2)
library(alphavantager)
arket <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
market$return[1] <- 0
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
market$return[1] <- 0
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
source("../api_keys.R")
# Using alphavantage here for more current info, quandl isn't always to date
av_api_key(alpha_vantage_key)
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
View(market)
colnames(stock) <- c("date", "price", "volume")
colnames(market) <- c("date", "price", "volume")
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
market$return[1] <- 0
View(market)
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
runApp()
runApp()
runApp()
runApp()
runApp()
# Quandl API and packages
#install.packages("Quandl")
library(Quandl)
# Me testing Quandl
Quandl.api_key(quandl_key)
test <- Quandl("FRED/GDP")
runApp()
runApp()
runApp()
runApp()
runApp()
list(psdlkfjapsd = "sldfkjsdlk", sdfsd = 2)
sector_growth()
sector <- av_get(av_fun = "SECTOR"
)
ggplot(sector, aes(x = sector, y = value)) +
geom_col(fill = "orangered")
View(sector)
unique(sector$rank.group)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sector_growth("Rank A: Real-Time Performance")
# Function to create the sector growth plot
sector_growth <- function(timeframe){
sector <- av_get(av_fun = "SECTOR") %>%
filter(rank.group == timeframe)
s <- ggplot(sector, aes(x = sector, y = value)) +
geom_col(fill = "orangered") +
labs(title = "Sector Performance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
s
}
sector_growth("Rank A: Real-Time Performance")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$ticker <- ticker_in
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
testa <- get_analytics("AAPL")
testa
names(testa)
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$ticker <- ticker_in
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
data <- data.frame("analytic" = names(ret), "value" = ret)
}
testa <- get_analytics("AAPL")
View(testa)
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
Analytic <- c("Ticker", "Price", "Expected Return", "Risk", "Beta",
"Average Alpha")
Value <- c(ticker_in, stock$price[last], stock$expected[last],
sd(stock$price),
(sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return), mean(stock$return - stock$expected, na.rm = T)
)
data <- data.frame(Analytic, Value)
}
testa <- get_analytics("AAPL")
runApp()
runApp()
runApp()
runApp()
git history
git help
runApp()
