}
# Monthly Data
month <- throw
month$month <- format.Date(month$date, format = "%B-%y")
month <- month %>%
group_by(ticker, month) %>%
summarise(price = mean(price), volume = sum(volume))
month$return <-
(month$price - lag(month$price))/ lag(month$price) * 100
month$return[1] <- 0
for (n in 1:nrow(month)) {
month$expected[n] <- cumsum(month$return)[n] / (n - 1)
}
ggplot(month) +
geom_point(mapping = aes(x = volume, y = return))
ggplot(throw, aes(x = return, y = volume)) +
geom_point()
ggplot(throw, aes(x = volume, y = return)) +
geom_point()
# Do stuff with Returns
library(dplyr)
library(ggplot2)
library(alphavantager)
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
alpha <- av_get(symbol = "MSFT", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
cor(alpha, market)
cor(alpha$close, market$close)
cor(alpha$adjusted_close, market$adjusted_close)
(sd(alpha$adjusted_close) * cor(alpha$adjusted_close, market$adjusted_close)) / sd(market$adjusted_close)
library(alphavantager)
View(month)
View(market)
typeof(market$volume)
return_chart <- function(ticker_in, x_axis, y_axis){
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[0] <- 0
ggplot(stock, aes(x_axis, y_axis)) +
geom_point()
}
return_chart <- function(ticker_in, x_axis, y_axis){
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[0] <- 0
q <- ggplot(stock, aes(x_axis, y_axis)) +
geom_point()
q
}
return_chart("MMM", "return", "volume")
return_chart <- function(ticker_in, x_axis, y_axis){
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[0] <- 0
q <- ggplot(stock, aes_string(x_axis, y_axis)) +
geom_point()
q
}
return_chart("MMM", "return", "volume")
return_chart("MMM", "volume", "return")
return_chart <- function(ticker_in, x_axis, y_axis){
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[0] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
q <- ggplot(stock, aes_string(x_axis, y_axis)) +
geom_point()
q
}
return_chart("MMM", "market", "return")
# Function to create the sector growth plot
sector_growth <- function{
sector <- av_get(av_fun = "SECTOR")
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
# Function to create the sector growth plot
sector_growth <- function(){
sector <- av_get(av_fun = "SECTOR")
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
View(alpha)
beta(alpha$adjusted_close, market$adjusted_close) ==
(sd(alpha$adjusted_close) * cor(alpha$adjusted_close, market$adjusted_close) / sd(market$adjusted_close))
(sd(alpha$adjusted_close) * cor(alpha$adjusted_close, market$adjusted_close) / sd(market$adjusted_close))
beta(alpha$adjusted_close, market$adjusted_close)
alpha <- av_get(symbol = "MSFT", av_fun = "TIME_SERIES_MONTHLY_ADJUSTED",
outputsize = "full")
market_month <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_MONTHLY_ADJUSTED",
outputsize = "full")
View(market_month)
(sd(alpha$adjusted.close) * cor(alpha$adjusted.close, market_month$adjusted.close) / sd(market_month$adjusted.close))
alpha <- av_get(symbol = "MSFT", av_fun = "TIME_SERIES_DAILY_ADJUSTED")
alpha <- av_get(symbol = "MSFT", av_fun = "TIME_SERIES_MONTHLY_ADJUSTED")
# Query test for stock prices -- was done before ^
stock <- Quandl.datatable("WIKI/PRICES", ticker = "SPY")
# Query test for stock prices -- was done before ^
stock <- Quandl.datatable("WIKI/PRICES", ticker = "MMM")
alpha <- av_get(symbol = "AAPL", av_fun = "TIME_SERIES_DAILY_ADJUSTED")
(sd(alpha$adjusted_close) * cor(alpha$adjusted_close, market$adjusted_close) / sd(market$adjusted_close))
alpha <- av_get(symbol = "AAPL", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
alpha <- av_get(symbol = "AAPL", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
(sd(alpha$adjusted_close) * cor(alpha$adjusted_close, market$adjusted_close) / sd(market$adjusted_close))
market <- av_get(symbol = "DJIA", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
(sd(alpha$adjusted_close) * cor(alpha$adjusted_close, market$adjusted_close) / sd(market$adjusted_close))
SPY <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
DJIA <- av_get(symbol = "DJIA", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
SPY$return <-
(SPY$price - lag(SPY$price))/ lag(SPY$price) * 100
SPY$return <-
(SPY$adjusted_close - lag(SPY$adjusted_close))/ lag(SPY$adjusted_close) * 100
DJIA$return <-
(DJIA$adjusted_close - lag(DJIA$adjusted_close))/ lag(DJIA$adjusted_close) * 100
alpha$return <-
(alpha$adjusted_close - lag(alpha$adjusted_close))/ lag(alpha$adjusted_close) * 100
alpha$return[0] <- 0
SPY$return[0] <- 0
DJIA$return[0] <- 0
(sd(alpha$return) * cor(alpha$return, SPY$return) / sd(SPY$return))
ggplot(alpha, aes(timestamp, close)) + geom_line
ggplot(alpha, aes(timestamp, close)) + geom_line()
ggplot(alpha, aes(timestamp, adjusted_close)) + geom_line()
ggplot(alpha, aes(timestamp, close)) + geom_line()
ggplot(alpha, aes(timestamp, adjusted_close)) + geom_line()
alpha$return[1] <- 0
SPY$return[1] <- 0
DJIA$return[1] <- 0
(sd(alpha$return) * cor(alpha$return, SPY$return) / sd(SPY$return))
(sd(alpha$return) * cor(alpha$return, DJIA$return) / sd(DJIA$return))
beta(alpha$return, DJIA$return)
alpha <- av_get(symbol = "CBWTF", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
alpha$return <-
(alpha$adjusted_close - lag(alpha$adjusted_close))/ lag(alpha$adjusted_close) * 100
alpha$return[1] <- 0
(sd(alpha$return) * cor(alpha$return, DJIA$return) / sd(DJIA$return))
timestamp == alpha$timestamp
row_number(DJIA$timestamp == alpha$timestamp[1])
alpha$timestamp[1]
DJIA$timestamp == alpha$timestamp[1]
row_number(DJIA$timestamp == alpha$timestamp[1])
sum(DJIA$timestamp == alpha$timestamp[1])
index(DJIA$timestamp == alpha$timestamp[1])
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$price - lag(market$price))/ lag(market$price) * 100
market$return[1] <- 0
market$return <- (market$adjusted_close - lag(market$adjusted_close))/
lag(market$adjusted_close) * 100
market$return[1] <- 0
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
}
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
get_analytics("MMM")
money <- read.csv("/c/users/joeyr/downloads/chase0384_activity_20180529")
money <- read.csv("~/Downloads/Chase0384_Activity_20180529.csv")
money <- read.csv("~/../Downloads/Chase0384_Activity_20180529.csv")
money <- read.csv("d/VP\ Finance/Chase0384_Activity_20180529.csv")
money <- read.csv("d/VP\ Finance/chase.csv")
sv
money <- read.csv("d/VP\ Finance/chase.csv")
money <- read.csv("D:/VP\ Finance/chase.csv")
View(money)
library(dplyr)
checks <- money %>% select(Check.or.Slip.. != NA)
colnames(money) <- c("Detail", "Date", "Description", "Amount", "Type", "Balance", "Check")
checks <- money %>% select(Check != NA)
%>% select(Check != NA)
checks <- money
View(checks)
%>% select(Check > 0)
checks <- money
checks <- money %>%
select(Check != NA)
checks <- money %>%
select(Check != NA)
checks <- money %>%
select(Check > 0)
checks <- money[money$Check != NA,]
checks <- money[money$Check != NA,]
library(dplyr)
money$Check
money$Check != NA
money$Check != "NA"
checks <- money[money$Check != "NA",]
checks <- money[money$Detail == "CHECK",]
checks <- checks %>% select(Check < 200)
checks <- checks %>% select("Check" < 200)
checks <- checks %>% filter(Check < 200)
checks$Amount <- -checks$Amount
checks <- checks %>% desc("Check")
checks <- checks %>% desc("Check")
checks <- checks %>% desc(Check)
checks <- desc(checks$Check)
checks <- money[money$Detail == "CHECK",] %>%
filter(Check < 200)
checks$Amount <- -checks$Amount
checks <- desc(checks$Check)
checks <- money[money$Detail == "CHECK",] %>%
filter(Check < 200)
checks$Amount <- -checks$Amount
checks <- desc(checks$Check)
checks <- money[money$Detail == "CHECK",] %>%
filter(Check < 200)
checks$Amount <- -checks$Amount
checks <- desc(checks)
checks <- money[money$Detail == "CHECK",] %>%
filter(Check < 200)
checks$Amount <- -checks$Amount
# Function to create the sector growth plot
sector_growth <- function(){
sector <- av_get(av_fun = "SECTOR")
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
sector_growth()
sector <- av_get(av_fun = "SECTOR")
# Other analysis tab
library(dplyr)
library(ggplot2)
library(alphavantager)
sector <- av_get(av_fun = "SECTOR")
av_get(av_fun = "SECTOR")
sector <- av_get(av_fun = "SECTOR")
ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
View(sector)
View(sector_growth)
View(sector)
# Function to create the sector growth plot
sector_growth <- function(timeframe){
sector <- av_get(av_fun = "SECTOR") %>%
filter(rank.group == timeframe)
s <- ggplot(sector, aes(x = sector, y = value, fill = rank.group)) +
geom_col(position = "dodge")
s
}
sector_growth("Rank I: 5 Year Performance")
ggplot(sector, aes(x = sector, y = value, color = "lightblue")) +
geom_col()
# Function to create the sector growth plot
sector_growth <- function(timeframe){
sector <- av_get(av_fun = "SECTOR") %>%
filter(rank.group == timeframe)
s <- ggplot(sector, aes(x = sector, y = value, fill = "cyan")) +
geom_col()
s
}
sector_growth("Rank I: 5 Year Performance")
# Function to create the sector growth plot
sector_growth <- function(timeframe){
sector <- av_get(av_fun = "SECTOR") %>%
filter(rank.group == timeframe)
s <- ggplot(sector, aes(x = sector, y = value, fill = "blue")) +
geom_col()
s
}
sector_growth("Rank I: 5 Year Performance")
# Function to create the sector growth plot
sector_growth <- function(timeframe){
sector <- av_get(av_fun = "SECTOR") %>%
filter(rank.group == timeframe)
s <- ggplot(sector, aes(x = sector, y = value)) +
geom_col(fill = "blue")
s
}
sector_growth("Rank I: 5 Year Performance")
# Function to create the sector growth plot
sector_growth <- function(timeframe){
sector <- av_get(av_fun = "SECTOR") %>%
filter(rank.group == timeframe)
s <- ggplot(sector, aes(x = sector, y = value)) +
geom_col(fill = "cyan")
s
}
sector_growth("Rank I: 5 Year Performance")
# Function to create the sector growth plot
sector_growth <- function(timeframe){
sector <- av_get(av_fun = "SECTOR") %>%
filter(rank.group == timeframe)
s <- ggplot(sector, aes(x = sector, y = value)) +
geom_col(fill = "orangered")
s
}
sector_growth("Rank I: 5 Year Performance")
price_chart("MMM", "2000-01-01", "2005-01-01", y_axis = "price")
# Function returns plot of givens stocks price or returns over time, can enter
#in beginning and ending periods
price_chart <- function(ticker_in, start_in = NA, end_in = Sys.Date(),
y_axis = "price"){
stock <- Quandl.datatable("WIKI/PRICES", ticker = ticker_in,
paginate = TRUE) %>%
select(date, adj_close)
colnames(stock) <- c("date", "price")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
p <- ggplot(stock, aes_string(x = "date", y = y_axis)) +
geom_line() +
scale_x_date(limits = c(as.Date(start_in), as.Date(end_in)),
date_minor_breaks = "1 year")
p
}
# Creates Daily Price Chart: by company and scrub for date
# Set Up
library(Quandl)
price_chart("MMM", "2000-01-01", "2005-01-01", y_axis = "price")
price_chart("MMM",  y_axis = "price")
shiny::runApp('scripts')
# Other analysis tab
library(dplyr)
library(ggplot2)
library(alphavantager)
market <- av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full")
market$return <- (market$adjusted_close - lag(market$adjusted_close))/
lag(market$adjusted_close) * 100
market$return[1] <- 0
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
test_get_analytics <- get_analytics("AAPL")
View(test_get_analytics)
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$ticker <- ticker_in
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
test_get_analytics <- get_analytics("AAPL")
# Funtion that returns the list of analytics
get_analytics <- function(ticker_in){
ret <- list()
stock <- av_get(symbol = ticker_in, av_fun = "TIME_SERIES_DAILY_ADJUSTED",
outputsize = "full") %>%
select(timestamp, adjusted_close, volume)
colnames(stock) <- c("date", "price", "volume")
stock$return <- (stock$price - lag(stock$price))/ lag(stock$price) * 100
stock$return[1] <- 0
for (n in 1:nrow(stock)) {
stock$expected[n] <- cumsum(stock$return)[n] / (n - 1)
}
stock$expected[1] <- 0
stock$market <- (market$adjusted_close - lag(market$adjusted_close)) /
lag(market$adjusted_close) * 100
last <- nrow(stock)
ret$ticker <- ticker_in
ret$price <- stock$price[last]
ret$expected_ret <- stock$expected[last]
ret$risk <- sd(stock$price)
ret$beta <- (sd(stock$return) * cor(stock$return, market$return)) /
sd(market$return)
ret$alpha_avg <- mean(stock$return - stock$expected, na.rm = T)
ret
}
test_get_analytics <- get_analytics("AAPL")
View(test_get_analytics)
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
test_get_analytics$price
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
test_get_analytics$ticker
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
